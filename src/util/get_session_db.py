from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from contextlib import contextmanager

# ğŸ”¹ Criando o engine do banco de dados
engine = create_engine("mysql+mysqlconnector://root@localhost:3306/gestaoeventos", echo=False, pool_pre_ping=True)

# ğŸ”¹ Criando a fÃ¡brica de sessÃµes
SessionFactory = sessionmaker(bind=engine, expire_on_commit=False)
Session = scoped_session(SessionFactory)  # Gerencia sessÃµes automaticamente

# ğŸ”¹ FunÃ§Ã£o para obter uma sessÃ£o manualmente (caso necessÃ¡rio)
def get_session_db():
    return Session()

# ğŸ”¹ Gerenciador de sessÃ£o para uso seguro com `with`
@contextmanager
def session_scope():
    session = Session()
    try:
        yield session  # Retorna a sessÃ£o ativa para uso no bloco `with`
        session.commit()  # Confirma a transaÃ§Ã£o ao final do bloco
    except Exception as e:
        session.rollback()  # Em caso de erro, desfaz a transaÃ§Ã£o
        raise e
    finally:
        session.close()  # Fecha a sessÃ£o corretamente
